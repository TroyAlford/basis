name: Release

on:
  push:
    branches: [ 'main' ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: ./.github/actions/asdf-setup

      - name: Create Release
        id: create_release
        uses: ./.github/actions/create-release
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if Version Created
        id: release_created
        run: |
          if [[ -n "${{ steps.create_release.outputs.released }}" ]]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "version=${{ steps.create_release.outputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "No new version created. Skipping publication."
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Check NPM Token
        if: steps.release_created.outputs.should_publish == 'true'
        id: npm_token
        run: |
          if [[ -n "${{ secrets.NPM_TOKEN }}" ]]; then
            echo "token_exists=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ NPM_TOKEN secret is not set. Skipping npm publication."
            echo "token_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure NPM
        if: steps.release_created.outputs.should_publish == 'true' && steps.npm_token.outputs.token_exists == 'true'
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc

      - name: Identify Changed Workspaces
        id: changes
        run: |
          changed=$(bun workspace changed --only '^@basis/')
          echo "Changed workspaces: $changed"
          echo "workspaces=$changed" >> $GITHUB_OUTPUT

      - name: Build and Publish Changed Workspaces
        if: steps.changes.outputs.workspaces != '[]' && steps.release_created.outputs.should_publish == 'true' && steps.npm_token.outputs.token_exists == 'true'
        run: |
          workspaces='${{ steps.changes.outputs.workspaces }}'
          version='${{ steps.release_created.outputs.version }}'
          
          for workspace in $(echo "$workspaces" | jq -r '.[]'); do
            echo "Building $workspace@$version"
            build_output=$(bun workspace build "$workspace" -v "$version" 2>&1)
            
            if [[ "$build_output" == *"SKIP"* ]]; then
              echo "⚠️ Build script is set to SKIP for $workspace. Skipping."
              continue
            fi
            
            echo "$build_output"
          
            npm_response=$(curl -s "https://registry.npmjs.org/$workspace")
            exists=$(echo "$npm_response" | jq -r ".versions | keys | contains([\"$version\"])")
            if [[ "$exists" == "true" ]]; then
              echo "⚠️ Version $version of $workspace already exists on npm. Skipping."
              continue
            fi
            
            echo "Publishing $workspace@$version"
            cd "$(bun workspace find "$workspace")"
            bun publish --access public --tag latest
            cd -
          done
