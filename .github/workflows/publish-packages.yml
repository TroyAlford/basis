name: Build & Publish Packages

on:
  workflow_dispatch:
    inputs:
      shouldPublish:
        description: 'Publish packages to npm after building'
        type: boolean
        required: true
        default: false

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ github.head_ref || github.ref_name }}
      - uses: ./.github/actions/asdf-setup

      - name: Get Latest Tag
        id: latest_tag
        run: |
          tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "tag=${tag#v}" >> $GITHUB_OUTPUT

      - name: Check NPM Token
        if: inputs.shouldPublish
        id: npm_token
        run: |
          if [[ -n "${{ secrets.NPM_TOKEN }}" ]]; then
            echo "token_exists=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ NPM_TOKEN secret is not set. Skipping npm publication."
            echo "token_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure NPM
        if: inputs.shouldPublish && steps.npm_token.outputs.token_exists == 'true'
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc

      - name: Get All Workspaces
        id: workspaces
        run: |
          workspaces=$(bun workspace list --only '^@basis/')
          echo "workspaces=$workspaces" >> $GITHUB_OUTPUT

      - name: Build Workspaces
        id: build
        run: bun ws build-all

      - name: Publish Workspaces
        if: inputs.shouldPublish && steps.npm_token.outputs.token_exists == 'true'
        shell: bash
        run: |
          workspaces='${{ steps.workspaces.outputs.workspaces  }}'
          version='${{ steps.latest_tag.outputs.tag }}'
          
          for workspace in $(echo "$workspaces" | jq -r '.[]'); do
            # Skip workspaces that weren't built
            if [[ " ${skipped_workspaces[*]} " =~ " ${workspace} " ]]; then
              echo "⏭️ Skipping publication of $workspace (not built)"
              continue
            fi
            
            if npm view "$workspace@$version" version 2>/dev/null; then
              echo "⚠️ Version $version of $workspace already exists on npm. Skipping."
              continue
            fi
            
            echo "Publishing $workspace@$version"
            cd "$(bun workspace find "$workspace")"
            npm publish --access public
            cd -
          done
