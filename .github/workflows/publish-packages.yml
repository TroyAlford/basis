name: Build & Publish Packages

on:
  workflow_dispatch:
    inputs:
      shouldPublish:
        description: 'Publish packages to npm after building'
        type: boolean
        required: true
        default: false

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: ./.github/actions/asdf-setup

      - name: Get Latest Tag
        id: latest_tag
        run: |
          tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "tag=${tag#v}" >> $GITHUB_OUTPUT

      - name: Check NPM Token
        if: inputs.shouldPublish
        id: npm_token
        run: |
          if [[ -n "${{ secrets.NPM_TOKEN }}" ]]; then
            echo "token_exists=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ NPM_TOKEN secret is not set. Skipping npm publication."
            echo "token_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure NPM
        if: inputs.shouldPublish && steps.npm_token.outputs.token_exists == 'true'
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc

      - name: Get All Workspaces
        id: workspaces
        run: |
          packages=$(bun workspace list --only '^@basis/')
          echo "packages=$packages" >> $GITHUB_OUTPUT

      - name: Build @basis/bun-plugins
        run: |
          version='${{ steps.latest_tag.outputs.tag }}'
          echo "Building @basis/bun-plugins@$version"
          if ! bun workspace build "@basis/bun-plugins" -v "$version"; then
            echo "::error::Failed to build @basis/bun-plugins"
            exit 1
          fi
          echo "✅ Successfully built @basis/bun-plugins"

      - name: Build Remaining Packages
        id: build
        run: |
          packages='${{ steps.workspaces.outputs.packages }}'
          version='${{ steps.latest_tag.outputs.tag }}'
          failed_packages=()
          skipped_packages=()
          
          for package in $(echo "$packages" | jq -r '.[]'); do
            # Skip bun-plugins as it's already built
            if [ "$package" = "@basis/bun-plugins" ]; then
              continue
            fi
            
            echo "Building $package@$version"
            result=$(bun workspace build "$package" -v "$version" 2>&1)
            if [[ $result == *"Skipping build"* ]]; then
              echo "⏭️ Skipping $package (build disabled)"
              skipped_packages+=("$package")
            elif [ $? -eq 0 ]; then
              echo "✅ Successfully built $package"
            else
              echo "::error::Failed to build $package"
              failed_packages+=("$package")
            fi
          done
          
          if [ ${#failed_packages[@]} -gt 0 ]; then
            echo "::group::Failed Package Builds"
            echo "The following packages failed to build:"
            printf '%s\n' "${failed_packages[@]}"
            echo "::endgroup::"
            echo "failed_packages=${failed_packages[*]}" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          if [ ${#skipped_packages[@]} -gt 0 ]; then
            echo "::group::Skipped Packages"
            echo "The following packages were skipped:"
            printf '%s\n' "${skipped_packages[@]}"
            echo "::endgroup::"
            echo "skipped_packages=${skipped_packages[*]}" >> $GITHUB_OUTPUT
          fi

      - name: Publish Packages
        if: inputs.shouldPublish && steps.npm_token.outputs.token_exists == 'true'
        shell: bash
        run: |
          packages='${{ steps.workspaces.outputs.packages }}'
          skipped_packages='${{ steps.build.outputs.skipped_packages }}'
          version='${{ steps.latest_tag.outputs.tag }}'
          
          for package in $(echo "$packages" | jq -r '.[]'); do
            # Skip packages that weren't built
            if [[ " ${skipped_packages[*]} " =~ " ${package} " ]]; then
              echo "⏭️ Skipping publication of $package (not built)"
              continue
            fi
            
            if npm view "$package@$version" version 2>/dev/null; then
              echo "⚠️ Version $version of $package already exists on npm. Skipping."
              continue
            fi
            
            echo "Publishing $package@$version"
            cd "$(bun workspace find "$package")"
            npm publish --access public
            cd -
          done
