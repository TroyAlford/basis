name: 'Create Convco Release'
description: 'Create a new release based on Conventional Commits'

inputs:
  github-token:
    description: 'GitHub token for creating the release'
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ASDF Setup
      uses: ./.github/actions/asdf-setup
      with:
        plugins: '["bun@latest"]'

    - name: Determine new version
      id: version
      shell: bash
      run: |
        # Use bunx to run convco to determine the next version
        version=$(bunx standard-version --dry-run | grep "tagging release" | awk '{print $4}' | sed 's/^v//')
        echo "version=$version" >> $GITHUB_OUTPUT

        # Fetch the latest tag
        latest_tag=$(git describe --tags --abbrev=0)

        # Check if the new version is the same as the latest tag
        if [ "$version" == "$latest_tag" ]; then
          echo "release_needed=false" >> $GITHUB_OUTPUT
          echo "No release necessary. The version $version is already the latest tag."
        else
          echo "release_needed=true" >> $GITHUB_OUTPUT
        fi

    - name: Generate changelog
      id: changelog
      if: steps.version.outputs.release_needed == 'true'
      shell: bash
      run: |
        # Fetch the latest changes from the remote
        git fetch origin main

        # Check if there are any tags
        if git describe --tags --abbrev=0 >/dev/null 2>&1; then
          # Get the latest tag
          latest_tag=$(git describe --tags --abbrev=0)
          # Generate changelog with commit messages since the latest tag up to origin/main
          changelog=$(git log $latest_tag..origin/main --pretty=format:"%s" --no-merges)
        else
          # No tags found, generate changelog from the beginning of the repo up to origin/main
          changelog=$(git log origin/main --pretty=format:"%s" --no-merges)
        fi

        # Output the changelog
        printf "changelog<<EOF\n%s\nEOF\n" "$changelog" >> $GITHUB_ENV

    - name: Create Release
      if: steps.version.outputs.release_needed == 'true'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        gh release create v${{ steps.version.outputs.version }} \
          --title "Release ${{ steps.version.outputs.version }}" \
          --notes "${{ steps.changelog.outputs.changelog }}"
