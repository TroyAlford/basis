name: ASDF Setup & Install
description: Run ASDF setup & install dependencies

inputs:
  plugins:
    description: 'JSON string of ASDF plugins and their versions to install'
    required: false
    default: '[]'

runs:
  using: composite

  steps:
    - uses: actions/checkout@v3
    - uses: asdf-vm/actions/setup@v2

    - name: Install ASDF plugins & tools
      shell: bash
      run: |
        # Install plugins and tools from .tool-versions
        if [ -f .tool-versions ]; then
          while read -r tool version; do
            if ! asdf plugin list | grep -q "^$tool$"; then
              asdf plugin add "$tool"
            fi
            asdf install "$tool" "$version"
          done < .tool-versions
        fi

        # Install additional plugins if specified
        if [ "${{ inputs.plugins }}" != "[]" ]; then
          echo "${{ inputs.plugins }}" | jq -r '.[]' | while IFS='@' read -r plugin version; do
            if ! asdf plugin list | grep -q "^$plugin$"; then
              asdf plugin add "$plugin"
            fi
            if [ "$version" = "latest" ]; then
              asdf install "$plugin" latest
              latest_version=$(asdf list "$plugin" | grep -v "No versions installed" | tail -n 1 | tr -d ' *')
              asdf global "$plugin" "$latest_version"
            else
              asdf install "$plugin" "$version"
              asdf global "$plugin" "$version"
            fi
          done
        fi

        # Ensure jq is installed
        if ! asdf plugin list | grep -q "^jq$"; then
          asdf plugin add jq
          asdf install jq latest
          asdf global jq latest
        fi

        # Reshim all tools
        asdf reshim

    - name: Determine package manager and set cache key
      id: pkg-manager
      shell: bash
      run: |
        if [ -f package.json ]; then
          if [ -f bun.lockb ]; then
            echo "manager=bun" >> $GITHUB_OUTPUT
            echo "lock_file=bun.lockb" >> $GITHUB_OUTPUT
          elif [ -f yarn.lock ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "lock_file=yarn.lock" >> $GITHUB_OUTPUT
          elif [ -f package-lock.json ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "lock_file=package-lock.json" >> $GITHUB_OUTPUT
          else
            PACKAGE_MANAGER=$(jq -r '.packageManager | if type == "string" then split("@")[0] else empty end // empty' package.json)
            case $PACKAGE_MANAGER in
              npm)
                echo "manager=npm" >> $GITHUB_OUTPUT
                echo "lock_file=package-lock.json" >> $GITHUB_OUTPUT
                ;;
              yarn)
                echo "manager=yarn" >> $GITHUB_OUTPUT
                echo "lock_file=yarn.lock" >> $GITHUB_OUTPUT
                ;;
              bun)
                echo "manager=bun" >> $GITHUB_OUTPUT
                echo "lock_file=bun.lockb" >> $GITHUB_OUTPUT
                ;;
              *)
                echo "manager=npm" >> $GITHUB_OUTPUT
                echo "lock_file=package-lock.json" >> $GITHUB_OUTPUT
                ;;
            esac
          fi
        else
          echo "No package.json found. Skipping package manager determination."
          exit 0
        fi

    - name: Cache dependencies
      uses: actions/cache@v3
      if: steps.pkg-manager.outputs.manager
      with:
        path: |
          **/node_modules
        key: ${{ runner.os }}-${{ steps.pkg-manager.outputs.manager }}-${{ hashFiles('**/${{ steps.pkg-manager.outputs.lock_file }}') }}
        restore-keys: |
          ${{ runner.os }}-${{ steps.pkg-manager.outputs.manager }}-

    - name: Install dependencies
      if: steps.pkg-manager.outputs.manager
      shell: bash
      env:
        HUSKY: '0'
      run: |
        case ${{ steps.pkg-manager.outputs.manager }} in
          npm)
            npm ci
            ;;
          yarn)
            yarn install --frozen-lockfile
            ;;
          bun)
            bun install --frozen-lockfile
            ;;
        esac
