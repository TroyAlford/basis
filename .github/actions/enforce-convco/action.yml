name: 'Enforce Conventional Commits'
description: 'Enforces conventional commit format for PR titles'

inputs:
  github-token:
    description: 'GitHub token for creating comments'
    required: true

runs:
  using: "composite"
  steps:
    - name: Validate PR Title
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        PR_TITLE: ${{ github.event.pull_request.title }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        REPO: ${{ github.repository }}
      run: |
        # Conventional commit pattern
        pattern="^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\([a-z0-9-]+\))?(!)?: .+"
        
        # Function to find existing bot comment
        find_comment_id() {
          gh api "repos/$REPO/issues/$PR_NUMBER/comments" --jq '.[] | select(.user.login == "github-actions[bot]" and contains(.body, "PR title")) | .id'
        }
        
        if [[ ! "$PR_TITLE" =~ $pattern ]]; then
          # Create detailed error message
          message="❌ PR title does not follow conventional commit format.

        Your title: \`$PR_TITLE\`

        Please update your PR title to follow this format:
        \`type: description\` or \`type(scope): description\`

        Valid types:
        - \`feat\`: Introduces a new feature
        - \`fix\`: Patches a bug
        - \`docs\`: Changes to documentation
        - \`style\`: Changes that don't affect code meaning
        - \`refactor\`: Code changes that neither fix a bug nor add a feature
        - \`perf\`: Code changes that improve performance
        - \`test\`: Adding or correcting tests
        - \`build\`: Changes affecting build system or dependencies
        - \`ci\`: Changes to CI configuration files and scripts
        - \`chore\`: Other changes that don't modify src or test files
        - \`revert\`: Reverts a previous commit

        Optional additions:
        - Add a scope in parentheses: \`feat(api): description\`
        - Add ! for breaking changes: \`feat!: description\` or \`feat(api)!: description\`

        Examples:
        - \`feat: add user authentication\`
        - \`fix(api): handle null response\`
        - \`feat(ui)!: redesign login page\`"
        else
          message="✅ PR title follows conventional commit format"
        fi

        # Find existing comment
        comment_id=$(find_comment_id)
        
        if [ -n "$comment_id" ]; then
          # Update existing comment
          gh api "repos/$REPO/issues/comments/$comment_id" -X PATCH -f body="$message"
        else
          # Create new comment
          gh pr comment "$PR_NUMBER" --body "$message"
        fi
        
        # Exit with error if title is invalid
        if [[ ! "$PR_TITLE" =~ $pattern ]]; then
          exit 1
        fi
